<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["topup"],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "exchange", "payment"],
                'transfer_types' => ["topup", "exchange", "transfer"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "02c2be7f-a1e7-4fd9-ac93-f45ea7c1181c",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "4664c9b6-482d-4f09-b784-1c2f1951c46d",
                'private_money_id' => "9cbc7f46-9d67-4b03-8d31-851dc4babea8",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "teGkcTFi8rly2A3fUSTnBnw1ebiwwp7XWkzGOkshCloN6mhdOZrA0kK3PVNMy53MfmYtdOJ4TSKZOTBGQy3rzEUE1qq",
                'transaction_id' => "c2808222-f7fd-41f2-90ad-80744a0dd571",
                'private_money_id' => "19cafee2-7fc0-4d23-ad62-6308383288b4",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "transfer", "payment"],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "4e6f1e4d-8f66-42f2-afde-400a7810b822",
                'customer_name' => "QBj8LZLbSgpqCg51lbFg",
                'transaction_id' => "83272682-664d-4d89-8709-3aab370408a4",
                'private_money_id' => "ceb35f48-c095-4a9b-bdb2-12fbaf0a9626",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "transfer", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "3AlEBom27bUbqEj8bNrd3i7298gqYIl2oa2AbAkKAmraskFVQIAXM2zHDGgQ3WiOkDhIS88Baev1lDGX3YxYb",
                'customer_id' => "9b6072b9-b5ec-4d0a-a7d5-ae69a6be54b3",
                'customer_name' => "4G2anVIVZNHQB9CXSZplmcFlVMUqLBHbhJTyAccy2SmlL0nFlOt3BRz7qHjAHD9pJjzc0rEI5Xbkf9h09zVU0MKqe0aVieqR0QEuLfHCR1XuzTTpiu2oWn7Un6ClX6GdWHJCtz3zbNIo81XZg5JwYrx83tmXYsKUrk2R58poEHJhkbXeYzHcy2rsRV6ii5tKsQlxzzZhMdiNEpBPuRWXSvfIlwW0dkRyGxiprjWkXdm",
                'transaction_id' => "25f4f661-e815-4109-9329-ea49df2302d3",
                'private_money_id' => "2e3830d6-f99d-4995-bb04-4b35f9b17bf8",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "transfer", "payment"],
                'transfer_types' => ["exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "89c73268-8d67-4a1d-b897-047aefcbbe02",
                'shop_name' => "Gjp2VdopDHojCZvJF3JmdQndq8u9y7B383FYTLutQKsvYgkqGOqEJwSFMTYoYjMeERlmcdmJkxSv5pnLhFmMWC1UNahafRenuXajbax6Q8tIfGArljxgdmoXtJMxUiLvzvY4YLwrj7tLimXo0t6CtX17LYvxfW29HVscWOcY7vjXVskWgkgB8cCHahiVfbIP9WMlrqBJcsHDH3iftjmyDX8HutG7TnDj9vADJtRYkZGcX",
                'customer_id' => "0d6ecb7f-cc53-437c-abc7-ca36cff95038",
                'customer_name' => "vfgXi3IywbP9TDzOfrZKEKkhBSuua8QNH6kWFC3BmX9VLd1MHUspxDHQECw76XpZ43g6ntdQfCR0cC83FXxz9WKKoall39841vJ8udi9pnXZ7lul8UbRYbuhqlEmGvIyBnpJyITrFAj39BHqBVpMdrfS3fSfVPrxR6VIDsCD20dhbHRr0jxnjF0BGnyMhYQZWvZhKXHk8qqA3VIANrCpuuGjNLv5lp3O0SjXlad",
                'transaction_id' => "17a8d05d-9281-4bb1-9b39-ec90fb5c364b",
                'private_money_id' => "4b02e2a2-b05e-40e9-a17f-05ba8d77a47d",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "transfer"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 6526,
                'shop_id' => "8d006be6-acd5-4a7a-b221-4fb43c124ec0",
                'shop_name' => "swljLN08tBmf0MEWLmyVygr6GWw3nuepDMDvsbWk90UALPJAuISAaE00XM7ibtw66nMLYLH0BVB5qlHpirmtZajWQ0TWLvNOwjGm1vLEAXmJg3wI4t3rWcubAeQGZDIbYBvOwnPm1yyh0YHyDnSmN9DL6xxp2PlSODzNZQASewVrloTfMFMupzLu25WMRjOmVEbP7v2Oxj4z9xvUgNLDcOp48XHEumKULvhtlRy3Rmfwt8l1y3bWMj",
                'customer_id' => "13ca5e8e-211d-4079-ae29-24b0c3be9342",
                'customer_name' => "DBrrTe0w44YECllV1vGu2ToJUSzKl7NMI9gTJlfeZud4EGvnvcXe4e0x8vHvfTy99fiF4RJYZEgkJxtGY0pr6EQ8oLlw8E8hwO1mViVauNC8O91mXvUFHAYTpzpoTfo8",
                'transaction_id' => "2e921197-9488-4c15-9f18-7edcecdc2daa",
                'private_money_id' => "11b26127-1b6f-4b74-9bb3-1fd6fd92de7d",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 1117,
                'per_page' => 9091,
                'shop_id' => "7113d109-3d43-4e4e-bcfb-1452f91bfbe6",
                'shop_name' => "8dNGhx3KHenk",
                'customer_id' => "1b3b3c3d-ccbe-4a8d-a0bb-d9a4a9e9ad54",
                'customer_name' => "THcTvWh82jGnvgo463XYA5VOUIEcwgNUXFSoCIT9MWo69C4",
                'transaction_id' => "3942588a-655e-43f1-ad55-93ae4d4099c5",
                'private_money_id' => "f188ec92-a0f6-4eeb-9d72-71d7501e8325",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "exchange", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2019-02-05T00:14:03.000000+09:00",
                'page' => 6522,
                'per_page' => 1967,
                'shop_id' => "61c2ae23-0c4d-4e7b-b813-c0d1f0e75cb8",
                'shop_name' => "R4bHNTAuvcSYuP5TmVhoMibTPD4WRrJdDiIzpMGCcPSz4XxyKHmHDE9mwiwteJN19TKhnEUWJJf0jhvGrR1HEWCom69oMfFzP2HH892QQGa",
                'customer_id' => "fa24895b-a1f4-4b4e-893a-056b600b3334",
                'customer_name' => "iiTfySaGVUK3o0GAGTmOvXVpeRSz9db22MPZ609MLPZFgU8Yq8uQZhuMByNH50uC3JdA9nzuKyvn5fqRSLkHe24O4IdE7XlJuF2ONDFb5kEwf2RJmkG5D4Ajyim0j9r8vP6vXYXvzc9nqjfq1qQNCVzzAqEaQqglvmNQXqJxAHvhmPpyN7TCWiFNSEPOhRvClKQTxleqm71QlPsW2PqlhybnFhO9AILSC",
                'transaction_id' => "c69d9c85-192c-474b-a695-b3b07f47c277",
                'private_money_id' => "200edfac-971a-4ea6-b189-c08247dc0aef",
                'is_modified' => FALSE,
                'transaction_types' => ["payment"],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2023-12-12T10:03:19.000000+09:00",
                'to' => "2022-06-01T10:28:23.000000+09:00",
                'page' => 970,
                'per_page' => 3501,
                'shop_id' => "961b1138-4d51-418f-a3a4-e935bd56fa18",
                'shop_name' => "0RtC6MVrZGqhqPllgI4REXIuDLwfdtm09by2iAK80IMRJn3vsZMvRJXYW3gSxtCItEmDLrXQo3SxdFiKuyhRyAopRpn3ucoXpFARuIW4VJzxTEMSSH6buFPt6x4PbOAsYSq1bSU49mG6Y8s182UYa2VzaX0BzhrURCg6C1IWgxpnmLua0xdms2tP4ZcFJrQzFiacITwJ5eB64aUOjwRy56hGh9QdV1G7dofkyG0ibyT1RJdq36tY",
                'customer_id' => "10f9f0d0-8a76-43e4-9d36-b1d83d548996",
                'customer_name' => "Ls1edvl3Vwb67HJKDymHAvnrZESD4TyfdlGT7I8zlqYZvFoZdkRfH0I0RBMxjDMkvV4Cs7uJuoONmmNeMTXSCa1u06rH676QzhI4vMulhU245KExmvQmcGNZnjlifnbD2LaqujOlO2Z9CcvsXVTUupRhwMXSpfYlBwdFAomtAbCXOdh7XwlKBrNdlRknd74pGr4mTmADSvoMtETkVgN",
                'transaction_id' => "7ac22a30-9a94-4067-a195-49da406d01ae",
                'private_money_id' => "6fd5a218-f2c7-4769-bf59-55a4a0600fee",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup"],
                'transfer_types' => ["topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
