<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["payment", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["exchange", "payment", "topup"],
                'transfer_types' => ["topup", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "d47ffd3b-411d-468c-960f-9ea32a75dbaf",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "exchange", "payment"],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "49a2885f-85af-4139-a7cf-040d894b2a66",
                'private_money_id' => "2fd39a9d-ebe6-462c-9d42-cc4330e5a97a",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "payment", "exchange", "transfer"],
                'transfer_types' => ["transfer", "exchange", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdme",
                'transaction_id' => "430728ed-f65a-4efe-ae25-13a668e4d098",
                'private_money_id' => "be045487-59e3-49ef-80f6-6b9022cd33e2",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "transfer"],
                'transfer_types' => ["exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "fe058105-7685-4d4d-b3c4-f32bc8baca94",
                'customer_name' => "Sa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUi",
                'transaction_id' => "bdd83583-db16-4e14-ab43-825b6f983630",
                'private_money_id' => "5b0e0f78-4b4e-41ac-aa44-80dfd65db48b",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["transfer", "topup", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "sYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3",
                'customer_id' => "e1e01d49-41cd-4be7-8b26-1a056cc84a4f",
                'customer_name' => "9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDG",
                'transaction_id' => "dcd7d4bc-9796-4767-9f99-7af4f1498763",
                'private_money_id' => "81f7e7b1-0f5f-4765-8c19-56c8198381ff",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "2f3996b3-ca38-48e6-bb07-8163fc07ccf9",
                'shop_name' => "9G2ru7CIugZBUKc64A8KJDFHDE0",
                'customer_id' => "7806dff3-d496-41d0-a818-85846879f08c",
                'customer_name' => "LSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlq",
                'transaction_id' => "e8b9075d-d5ba-4c4b-87a5-777e0e82c829",
                'private_money_id' => "1b2baaa6-4860-47d6-a2cc-3f88d818958b",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["topup", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 3510,
                'shop_id' => "96499986-3c2b-4313-965f-e28d00dccdb9",
                'shop_name' => "qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2",
                'customer_id' => "21ec8814-a353-4391-a2e6-bcf544049cca",
                'customer_name' => "iolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz",
                'transaction_id' => "79d68215-feba-43a2-8f85-882ab4b0669c",
                'private_money_id' => "67020db9-26ce-47e4-8ca7-696e8c0142e1",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "payment", "transfer"],
                'transfer_types' => ["topup", "payment", "transfer"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 6073,
                'per_page' => 5583,
                'shop_id' => "036969ee-6ade-41ff-998d-ad2c7e663b0f",
                'shop_name' => "ZXWwwPUfmYGEVrOM4dkj0diMGxwkB",
                'customer_id' => "726760cd-1c46-4bc2-bd4e-1b117e6180cb",
                'customer_name' => "hTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOj",
                'transaction_id' => "b01bcb4d-a00c-4b09-a63a-3867c4c57002",
                'private_money_id' => "b7f78ec6-f1e6-4119-b30d-ca915ee0bbb8",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment", "topup", "transfer"],
                'transfer_types' => ["topup", "transfer", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2019-05-24T19:37:29.000000+09:00",
                'page' => 2064,
                'per_page' => 1520,
                'shop_id' => "0554db01-4019-4174-b41b-8dac7bc5a848",
                'shop_name' => "9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YX",
                'customer_id' => "dfb4fe02-c469-4dd9-8fd7-4db0b7ba5b06",
                'customer_name' => "oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwj",
                'transaction_id' => "0aa9c87c-7afa-4891-8738-7e553becd959",
                'private_money_id' => "1f685e87-0e1d-425e-8361-c0ac3b32c0db",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "exchange", "payment"],
                'transfer_types' => ["transfer", "exchange", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2024-09-22T13:04:32.000000+09:00",
                'to' => "2021-04-29T09:23:08.000000+09:00",
                'page' => 3002,
                'per_page' => 6960,
                'shop_id' => "1fa4ebae-f121-4e81-8706-d0d0c3a061bc",
                'shop_name' => "QkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2w",
                'customer_id' => "4adb676b-57af-47f0-b269-ac1035d6eb22",
                'customer_name' => "zqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0",
                'transaction_id' => "5bac03ac-1e0a-4bbb-9f75-21fcdf268c7b",
                'private_money_id' => "0e4bdfe1-c282-44ec-a455-f11348c72bfb",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "exchange", "topup", "transfer"],
                'transfer_types' => ["topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
