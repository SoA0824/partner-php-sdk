<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['transfer_types' => ["transfer", "payment", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['transaction_types' => ["topup", "payment", "transfer", "exchange"], 'transfer_types' => ["transfer"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['is_modified' => FALSE, 'transaction_types' => ["transfer", "payment"], 'transfer_types' => ["payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['private_money_id' => "73c4abd0-db71-49dc-b4b7-2212ab270dbe", 'is_modified' => FALSE, 'transaction_types' => ["payment"], 'transfer_types' => ["payment", "exchange", "transfer", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['transaction_id' => "072d12bc-b297-46a6-b336-3ee806998285", 'private_money_id' => "138586e5-8d81-4c6d-9283-30eeb4d07e28", 'is_modified' => FALSE, 'transaction_types' => ["exchange"], 'transfer_types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['customer_name' => "c3FuHhc80JqIWSBs5gp29Z9d9gsmW0rlQlbbp6ewuhQZC9BS2n4NqycyW8QjHY91S5BOglJf6ya3jvCzxojiaR9tvfSG7ETfiE5", 'transaction_id' => "cf457aad-ba1e-404f-8dcc-507f6f0ae911", 'private_money_id' => "a0fa8b18-0a2d-4b1d-972e-1294deadedeb", 'is_modified' => TRUE, 'transaction_types' => ["payment", "topup"], 'transfer_types' => ["transfer"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['customer_id' => "5e707a08-9a59-4d63-bffc-68a00d6ed23c", 'customer_name' => "4mW24ocXU4j5A5fTLzBwzSJlZt1xlM7oAxSi91wbpSMqveYXGFjra5jMYPuj1MQoqJGSBM8C0dd7FXcHMeG555", 'transaction_id' => "4e9bfd6d-c1af-4b8c-b108-3f2f6ea120e4", 'private_money_id' => "0fc6589e-5dba-46fd-b283-d49c5893510c", 'is_modified' => FALSE, 'transaction_types' => ["payment", "exchange", "transfer", "topup"], 'transfer_types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['shop_name' => "o1rkjyGDlXAGEBW2KQbxfhF92J2eAzKo7UOkmWE53qnX1", 'customer_id' => "6b8ec1f3-e693-4878-86e9-f80f0d3e0397", 'customer_name' => "YUtcFRcSRWTUvQQ85h7ay3NzIS9KzuLzRAwhPQb2ztdsRz8IBHVIZMER9smHgecqKVECduCgTsCIiyyaLmPTNbKovfmtgT8a2RuS2qTtdWp1eibwGs0zhOy1p3qlYkDhvfPYK8cVmoO5OXawQN4HWogp6OeUEEzgQmGnLoe8N0cUMbUmkeLDCTYpYcijSnSrb36T8ARa6YqKsMtkUjE5lP7TGoIVoXy5ixkPthLNnnFCLqzssBiQHOHGUe0kSk", 'transaction_id' => "d4eb045c-45e2-454d-a1aa-d0320ff4578a", 'private_money_id' => "51fad438-faf9-4ea2-b529-63d4686c463d", 'is_modified' => FALSE, 'transaction_types' => [], 'transfer_types' => ["topup", "payment", "transfer", "exchange"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['shop_id' => "b7313140-7cd2-4863-acf7-93e506de9792", 'shop_name' => "NjIeEHoBRGpaJRB9Q2VxZFQRBahReSZ3L9yfFZjAKMRptMmrgkc3FTrzK61mjubRhe1ul7Yw5Nu0Xf5sARN0ljfKr81fewBAON2HuoJm2GAkKzAzaZJBuJ6Fzf0yEH0aNkH02bVfFnRtTDasflxgrMBkP2Hpmf0hBYHmSnxiP2US8Y2Q2WgdidqcyBf7o61kgQdbFdimH2xFusRfZ8GUp6Ba7DRo5aWjYgty0taChXsLw56rS3YB50sXeG", 'customer_id' => "29e09783-c4ad-49db-b6cc-9f9688feca0c", 'customer_name' => "JEnKtHEYJWSvS9UO4Pxbsayonfsqfr94cYGSr0rKIh2JyWnQMYuKiN1TVXN65B3abPkI7vk4cvDXHSXSftA2p5QBuRurOt9BXv2xOxHh6MtDRPOpRShO9vAwsRKi6jQqJFiuwmi3Ix51DVOMM3QcmwsouKSIDQyntn3zVhuFI6UMCulWxnzGj1U8ie0k0Z8CLYbQOCTQChrjfMjjk17ZuYaOIuqIyHcMadyMDkWUsqktgtFYrqkbb", 'transaction_id' => "f213068a-caac-451f-bb5e-b9d2b739a761", 'private_money_id' => "725cb3c9-d2f8-4207-b61b-70a9f9fe047c", 'is_modified' => FALSE, 'transaction_types' => ["exchange", "topup"], 'transfer_types' => ["topup", "payment", "transfer"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['per_page' => 4901, 'shop_id' => "cb3f7ae4-e88d-476b-949f-bc9896045304", 'shop_name' => "fWIFKl0O9JzlKEyr5xIF8dHKn8V9YDv5DvuQpqQ5oZrOvOk3Dhts9hZsSoo0kA0S3EBY0NorFfwPl4b9dGIuMJhXjVQFaSKj2tR2RnpDoou8eUtQQ6gaz7xXtYNCjBEipRY92fsOW5SpdsDDeNoKxGByV5OwmlFEG75CTLv0rKSOtm4ZBzscYUwbgQMVFYcQsvCtHGhVb57EKTTm77", 'customer_id' => "e2ec962e-2240-43da-83a4-f32d13f0bf13", 'customer_name' => "l4C2dXXTDe9gP94VVz8kaF0cVhwaaZvtNR9fCVK7GKPIr9xA1ETPU6srsbV2fmRO8uZQ95qJxA19UCAdl2ruTpszObxxD", 'transaction_id' => "c23b047e-b008-41af-8df4-d5bb6d85d093", 'private_money_id' => "60a0dc60-2cd3-463d-8689-717e6b3c2b33", 'is_modified' => FALSE, 'transaction_types' => ["transfer", "payment", "topup"], 'transfer_types' => ["payment", "topup", "transfer", "exchange"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['page' => 9610, 'per_page' => 516, 'shop_id' => "c4ce68be-e7ee-4509-b611-7c4d6875b9da", 'shop_name' => "DNPhzdGDZdR1TlpaXPICYZk5SP9nbem4gZGwGnDBn0yonpsFIsbApitN0UyuyeGBZPNWJSCOea7YJAbnDFO0rXd2RSqJTvlOQxcaxFOAIucfsZUodc6bAxWM0o8VXmWhyaKp6sJ0YnPTclwVFdCpXVhexPvgWwPFZRTILthlWcsrZR4nMATVNgE1BAhp5OMRqrm2zjgnCZEdU", 'customer_id' => "4d790a6f-00fd-48bf-860d-ab25756eebe2", 'customer_name' => "nP2v9qMi2Rsrwc7jBsW9PnXBfKL4WWJ0HrtoHqcoZHu3MlxYpSwmZwRbsiwUs6d9XTFSlhtNQjYE4GkIsT1KIppGP6H5mU8leQiBTOA", 'transaction_id' => "03dd4ff2-c1d2-4f1d-8c57-06fdd1e89051", 'private_money_id' => "a9b68b57-6f23-45b9-bae7-f4bdfcba80eb", 'is_modified' => TRUE, 'transaction_types' => ["exchange"], 'transfer_types' => ["transfer", "exchange", "payment", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['to' => "2017-09-12T18:44:20.000000+09:00", 'page' => 2095, 'per_page' => 1711, 'shop_id' => "b2e59562-abb3-41e5-9e3c-abd68aa29a38", 'shop_name' => "nTkKOnOoyAqzEiHhFLa6sU6RbF9jnv3KBoNP4aXN9qyUbTY11ox6AL8govHLG4nI1A5GdXbPkdN9wFPzFVOl5voYr3V5miFicMhdfOuHhagIW8kYVobF2VV7Tu0FVFmDjZ8YsCru1PwYlmuGUNzt2jMPhY3DENf89P8PJd8oTqpUknGWajUKHvPFMJBrA7XodrDXvQsbmRYty0tniKB9gSpnlsNP7oFgLd6vx6lFD", 'customer_id' => "5494b718-575d-47fe-9388-9bb19dd55a2d", 'customer_name' => "aY00H0IJ5pNYPREVkvptxD8H3KioXkZApXfT3m1eGDc1BqAT2TUjqPoFyhBl9esvV2AAnpi4CpUm89uO0uFzuYbPnm7pDdghL0W1RlJkne55aHpnLQ", 'transaction_id' => "e403cfac-b0b1-4d9b-bc19-1fc60b1366e6", 'private_money_id' => "1453b3df-f78c-4a3a-9e5b-545e029d41e4", 'is_modified' => FALSE, 'transaction_types' => ["exchange"], 'transfer_types' => ["topup", "transfer", "payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['from' => "2016-12-27T12:17:27.000000+09:00", 'to' => "2021-02-16T21:22:58.000000+09:00", 'page' => 7185, 'per_page' => 1794, 'shop_id' => "50037ec6-e7b8-4c8d-bfec-599dc6ee9280", 'shop_name' => "P7BAtCuteH5jaSgx4AIKr9cB1ykFTHHIbNg21FCMUiS1KUl0LHqewta4eEkB4wK0KxxY6c376GvZ3nHKk1sHHhoMU1LcrhQxS6PlLas3dJRWfmDelvWTJb7FbVogSOu9D84NjZFuOGoz3CvwEiiO0MxU6vXI7avdZAp", 'customer_id' => "1dd8443b-32ed-458b-aa90-87e558dd0ff9", 'customer_name' => "xuP99aRGpmQ3vJ3YBdp0IkC046IZZYdixuXiq", 'transaction_id' => "40ae9a93-e31d-4c07-b110-c8e3e3c13477", 'private_money_id' => "77210359-f3ff-4d8d-8ef0-9a26589578dc", 'is_modified' => FALSE, 'transaction_types' => ["transfer", "payment", "topup"], 'transfer_types' => ["exchange", "payment", "topup", "transfer"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
