<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['transfer_types' => ["exchange", "transfer", "topup", "payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['transaction_types' => [], 'transfer_types' => ["exchange", "payment", "transfer", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['is_modified' => TRUE, 'transaction_types' => [], 'transfer_types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['private_money_id' => "620612ed-be2b-4d40-98ec-85ff8ba85437", 'is_modified' => TRUE, 'transaction_types' => ["payment", "topup"], 'transfer_types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['transaction_id' => "8689bf36-64e0-4c84-a3a0-dcb4b2ea6ce6", 'private_money_id' => "3880da4a-0faa-422a-b60e-c3dcbadee48d", 'is_modified' => TRUE, 'transaction_types' => [], 'transfer_types' => ["exchange", "payment", "transfer", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['customer_name' => "Q7zTfCyPRQFOmbT80btoI1v9y0kfNr19qA8xMacA0JZIOc4OtMzAl3Xw69B4Gv", 'transaction_id' => "088ecd93-b78a-4d9d-8930-ec824307cbb8", 'private_money_id' => "074ced05-c8ec-4672-a78a-6b0528aef621", 'is_modified' => TRUE, 'transaction_types' => [], 'transfer_types' => ["payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['customer_id' => "c49b984f-db2e-4a13-bcc6-f92687f2bfe3", 'customer_name' => "sSRf90oYnSecRkuHJZVPdMU2jydOnQrQIG2YB4bqqYHvZPD5RfYfJn3bJ0WE7JLuyZjVxKQQGDWdg7jvOlHyssT0qRniUBZncAgfMB6uQc8X8ZxOdRaO7q48KXiHS4dogHftv0u5AG3XKpsqdCTDNQ2bHToBusi9jDdkImCLCMh2aA1bJqpGIJ18ewdIb23WLsDyi6ifvXJ2uxuyEFROYtqJ37xnLipMGzeVm6T5ElCEFP", 'transaction_id' => "b78a2329-2b6a-444d-84f2-cb2e22f2d556", 'private_money_id' => "148eab59-6529-4614-a3f0-9b0ccb6400f5", 'is_modified' => TRUE, 'transaction_types' => ["topup", "transfer", "payment"], 'transfer_types' => ["payment", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['shop_name' => "ijDUABa689O9oe1W8hcW7eKCiHpVTcMuRu9cQxo4f2vOSV835KEZNTSImFj8Kdal9s37Gn7Fa0", 'customer_id' => "1d5bed59-8cd6-48e5-a24f-dbe7be3daf28", 'customer_name' => "iI4u3SjgBl6GOXGGhfsxPzYPrRDHnoMGUmylETNXAOoBVUlzHat3XrqPZodPRehb8EPaaMcL6W2lz7LipTrYrF", 'transaction_id' => "b6926026-ae6f-4ff7-bafb-ac66ae77697c", 'private_money_id' => "9447dbb2-0e35-40ed-be41-81c2ee940ab0", 'is_modified' => TRUE, 'transaction_types' => ["payment", "topup", "exchange"], 'transfer_types' => ["transfer", "topup", "payment", "exchange"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['shop_id' => "dfedeac4-78a5-4bc6-ab38-b459e40dcc20", 'shop_name' => "UmEvZOG7fycOjgD3p7MzILUOwbcxBnaP2t8fyNubTLM4Fa8PNEZhdSK23adbAHEkHWEXm05GMD0vqUwCBlKVWqnMKkR1yzwSYZXtLqWvvKgVClGSqR2TnthqOk40GUvrhSFZq59qGZz8nxVPB73jA0kMxv5HmMWfwPCT0Viix0P0JNbOspJTWPUjYyh415N", 'customer_id' => "1c4f6531-f88f-4d14-aaf6-4dab031c8574", 'customer_name' => "UbRfKEAPEJhUoT", 'transaction_id' => "140bf6ad-ce1c-4459-9070-48d2885f6578", 'private_money_id' => "ab9193b8-0ea4-4af3-8c76-42d7ea95fcf8", 'is_modified' => FALSE, 'transaction_types' => ["exchange", "payment", "topup"], 'transfer_types' => ["exchange", "payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['per_page' => 2316, 'shop_id' => "b7077fe4-d65f-4bff-8dc0-1202f40712f6", 'shop_name' => "1mvE4PDlgsL1vqandkZrjM7t06I4iTfxm4TcZbnSoE4BApOsXJ84uIkvi4dfITkL6JQR0bguhqbVCRTzKLxNR0sBbMbD6WaUqwpmXiFZovLnYp9fyQPZDkf9tqVoSUT3vd8QD2AdL9DOO5al9x", 'customer_id' => "aed280dc-f53a-40f7-bd41-0ccb870b7410", 'customer_name' => "M5JEKZwPcH0wXNssFP77ioHpOoIhxS3TWXtNhgXFGuBIQUsLUzAHO6a9RjoRod7dysRpbyZp0i3gI6FopIkcYeq2BNulRy8Ep4g", 'transaction_id' => "07b18424-e976-48b1-bbd3-239da2b2f843", 'private_money_id' => "029de584-cdbb-466e-9405-48fba1b74203", 'is_modified' => FALSE, 'transaction_types' => ["transfer", "topup", "payment", "exchange"], 'transfer_types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['page' => 3167, 'per_page' => 2168, 'shop_id' => "527d528b-19b0-4a52-bb97-1c91971b26f1", 'shop_name' => "mRJU2CpNTpUsrQa6I2gDRYXgyOQ2ReNgVJpAeU0thtEqe6nLAy2XIJFt0FvMU9pjDgjLePkFKW9S7DvQjzQ2auqxYOu8wfAgDmJtUT5KhnzgjSr8dQcHSpS9SNTYBSlk6QDA04IJJ1g4wz7zkDErcAodCJ6UmYYANaZi9bhd0uABaILfx7eNDIx87l3GA3E4DdGhbv2USJVaXcWAmbIunmUKAYj1PGEJkb", 'customer_id' => "b9ffa26f-1b6e-4144-9376-5931bb91cf0f", 'customer_name' => "uwDyTsVXYw6x6lmkH32Iiix4LN5vM41QDCLmA9tvAnqSWJE9l3YSuHlx8epDoA1xsJqhIoT9RStfwVvhnd3TWQxkxecsf9uk6xWsLzvoXwlGSu2WmyRf7cXJKNGomYmLdueUzIAbeKGvjPT6Zjva8jTQy1tCvwy9Os7kNGZXRFgyhg8BZ8JHZVj", 'transaction_id' => "e84aaeb4-1904-4c00-ac1f-77e382371789", 'private_money_id' => "f798090c-d518-4d13-b823-4cf79e2ac2f4", 'is_modified' => TRUE, 'transaction_types' => ["payment"], 'transfer_types' => ["payment", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['to' => "2024-03-04T15:42:47.000000+09:00", 'page' => 7091, 'per_page' => 7532, 'shop_id' => "70072045-a7cc-47c0-be42-d377e5bddd03", 'shop_name' => "MFgxIIW1VOiC3Jolsn6xKRhJziUujm3yOVuCM8HWL0EtNiYRDWv7eGWUedDKC2WXhEi1gOjUC3Zxx2jV1Z9MGE7yJTgU1VVsrxShjXGI5AbakMlIbVJ1H14CojG6xt4QfD6", 'customer_id' => "b57cdeb8-692e-4362-b3ad-b35caebd70eb", 'customer_name' => "yT5TCZNW2B2FKPHjpuvBWvJ1VOD9QrGU5gTsIxzTJzE1ADI5X6K4DDfOwfgLSmvfIdvjm5zNqRVvz9vaFDP1t4D3o5Xpi9o0RG9Fa7xnwMnqPn2ypk5mqS4z83acZUa73JL0e1OyCNK1AQyhgPJuGpyNoLU09zJkWH1bGI5b7MVaxnCXhAsVuYRDnOKdnMPwmlKBhr54dD1do", 'transaction_id' => "55915000-4cc3-4df0-bae1-583a811a025c", 'private_money_id' => "dd019027-4f87-4a96-ba5e-70c3819366d4", 'is_modified' => FALSE, 'transaction_types' => ["topup"], 'transfer_types' => ["topup", "transfer", "exchange"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(['from' => "2023-11-23T10:57:07.000000+09:00", 'to' => "2017-10-14T16:17:48.000000+09:00", 'page' => 2825, 'per_page' => 8365, 'shop_id' => "f5d71d47-aa48-4706-a5b7-3f5cc50ea128", 'shop_name' => "7UTikO1aC0W9sZW7XTU6UbEcAtsG2mhZmiuv57odcukyU6jl6myDLTF1bd0qpIR2SPt68uayPw2SOWKh3iriXS7xZXZdPsn3yrookdbo2MpoucTsG6OQs50wYsrxTiKNRwV1poGpBMGvk55GIn3xs6sTmzgUkZcuozJlTIji9JWjDjCG72uWt6QUt1VN8a291h96JXqQ4BRMXjCGv", 'customer_id' => "31cae9b9-2ce2-4b70-928b-31161eb429a7", 'customer_name' => "X68THJywDTjtAF516yhusZzffONPBO8KdHUQAKEsLqvcR1AW0k7h8KG1RehdOiKpJglmLjt6UII", 'transaction_id' => "16124883-804f-4db3-b9f0-274f05687985", 'private_money_id' => "786b806b-7224-470b-bb07-19ed363f910b", 'is_modified' => TRUE, 'transaction_types' => [], 'transfer_types' => ["exchange", "transfer"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
