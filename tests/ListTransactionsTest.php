<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["topup", "exchange_outflow", "payment", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "e6a1cd80-ea7d-4975-af45-887d09b0d468",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "topup", "exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "449Qu6-085-4Q2M--KI-K9o6De1XV84c",
                'private_money_id' => "ff02c756-9279-47aa-8a99-f3c721766b0e",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "9664f432-f056-46bc-a094-7d3c520a9880",
                'organization_code' => "0-9JI-rIlGC-0pK--7ye40",
                'private_money_id' => "fe56ca48-68f3-4843-93b9-01c776d7b6d5",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "94bed8f8-245d-45f5-b125-ca6b2632a121",
                'transaction_id' => "776dda40-1c6a-4041-8e69-6c097dd7ec57",
                'organization_code' => "Dr",
                'private_money_id' => "2cfa7de3-040e-44e1-bf46-06582a76fac8",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "yjFSyP2V5D74TL0BTM7NbXwFeYYiirZ2aSwjNwbhTUVP6ivJvOMKEXZlPI7SULFGLyptWcQ8eLTL",
                'terminal_id' => "c930663e-7e00-4afc-8e23-c9ead83b968d",
                'transaction_id' => "2057aa8b-56b4-4b53-9e68-53538fb46787",
                'organization_code' => "kv1P7-lEq8",
                'private_money_id' => "fcc51f34-32b0-4121-adb6-976dcccf8bf4",
                'is_modified' => FALSE,
                'types' => ["payment", "topup", "exchange_outflow", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "f15d7121-112b-4f3e-b2ce-b99c1bef5545",
                'customer_name' => "SGjifpGPo24ofhNSwTHCzPeNenlPxlBAK2Kp40GZB44Sf0SbBEJ1iI6xdrPNsWMnjbjMj9YlactwihysTCYHXDR9CYiSr7kI1fqX7WCPcs7DbDO7UOWDWNSKVmVIvT7fvEzJgfY09kwaq1lb6GJoSRH2sAs9Z81OyIkY3bqnAxa8xKy7QbUabi8HN5Wgy7Eol6OSV33V3",
                'terminal_id' => "d93b66ee-c59f-46f3-8e8c-601233adc89b",
                'transaction_id' => "63a3dce5-ea69-4882-9f10-237bbb7363db",
                'organization_code' => "54G12yGkv-Vw-93e-o8K6u67v6A-",
                'private_money_id' => "74cc7b1d-4094-4ebe-b433-81def4e3abe9",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "2bc0b636-45e0-4c27-b24f-cb8390403ff7",
                'customer_id' => "d62b38ea-014b-4832-9d13-6a3f387a7c58",
                'customer_name' => "u9DZ7CoM4fqSUgBuNviNd898ZuLaMa8Hstgmd5dufVjURaU4Wh9gHghqTAIyYX4DWO4Np71zT5p9Chu",
                'terminal_id' => "622ccbb9-c783-4146-ac30-5e0ae12f1458",
                'transaction_id' => "e438e181-3638-41f9-8909-57ed9694ef5e",
                'organization_code' => "-b-e37G---B",
                'private_money_id' => "4f0f7a91-a471-497c-b03e-f5f79723d734",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 4583,
                'shop_id' => "39a89d2b-0fb4-4e9f-bedb-d8eb2fa445ff",
                'customer_id' => "1f6654ae-facb-4cdf-aff3-30f24ba12185",
                'customer_name' => "Cqco4IOVQnlpHolQp2GNDrNqq9DFIF7UP91j0pY5H2O5T533azcW2XsQBJb2rMMRQtXUZ0heG9jCUXKPz3akQLOy4Bk8asqXBexyUKZJ1KDkfps31pLUBSGYKwPr8nfwK5FlHqMPOsKKfO583OPj5WIRZxjvayRO0k5EthXWZILrzHT0XZ13TSnYJZmOCFlMLPdFyD5iscNvG1bRO8esx3QcMq6BOR1oYGL3EHeTXDJa",
                'terminal_id' => "1afe1c35-55f2-450f-98ae-bdb6124f39ef",
                'transaction_id' => "6eb50386-a9d1-4c3e-9c57-5f02e7246eba",
                'organization_code' => "0v-3-7-NXvCk2cx4--wgT-MMx2-h-D",
                'private_money_id' => "cfc8eddd-2f3e-400f-a371-5371ab788655",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 1392,
                'per_page' => 7403,
                'shop_id' => "dccd5dd6-25cb-4c6f-8cf7-474c2f244c59",
                'customer_id' => "f975de72-1383-4da3-8ed7-2787584639e2",
                'customer_name' => "5SPMeeWyEXccVoMxEsStPdvYchjiF7RSf3JRHisGtL9eTw1KfSUyqAvS4CzrSmzVZIQCxyy9V25cWoFboHFGmzuho9hHxKVEl1ZfQ9FG2OZQTM6ZxA3xfMWNwAohzDBqM9TKbP8Ey8IzVrvfNPVIJD7IWmAgyN5fh19QyYK4aKEEqO8B9FAyLcYHoweyVherrA",
                'terminal_id' => "7143833f-4251-4c51-b159-2b155e2dadc4",
                'transaction_id' => "483d3600-29a1-4ea5-b9d2-657b49121db2",
                'organization_code' => "V",
                'private_money_id' => "6034ae64-e118-4813-b6a8-ced34222fd4a",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "exchange_outflow", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2020-06-17T11:42:55.000000+09:00",
                'page' => 9589,
                'per_page' => 1585,
                'shop_id' => "158feb0d-1924-43d0-9dd9-a362dd5af364",
                'customer_id' => "25f526d7-691a-483b-98a4-4c5dd34f1dfa",
                'customer_name' => "qkpmUsJADG9gDhiCp5POzBcnwHlRQD1b2mkwqyqMRSMpUG9WUTyQC3g2xwFevEwafCsnjC9tImBJIj7DSqlpsCqZbta3FmjYmf78KESWUvqWuTF1wU7r1qTWczBNLyZMX6zz6bYt3LLKErsBUWaXD5fjydm4MLqFBabkHfpoMr5WppUvXalhSy",
                'terminal_id' => "e731a9df-6646-48db-bd4f-c9ca07178fbc",
                'transaction_id' => "b71436c6-64cd-4093-bea9-5c23a2632133",
                'organization_code' => "-6D85-J-Bmj",
                'private_money_id' => "cd13de43-8b7d-407f-89e3-66029693e6a0",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2019-12-25T18:56:48.000000+09:00",
                'to' => "2021-10-06T13:40:13.000000+09:00",
                'page' => 3199,
                'per_page' => 8623,
                'shop_id' => "e7b21df8-d4f8-468d-8689-58898301465a",
                'customer_id' => "45d3c53e-ceeb-4c34-a309-0ddac42f0897",
                'customer_name' => "yn1vwQH0sM3g20Ce7SirlUJXxuqPkCv4YgnhbtUiudOVrLTjWVcEnGXmCVCptmoJaIaRX9zHGled1",
                'terminal_id' => "0f223324-4020-4d57-911e-00ea438e94c8",
                'transaction_id' => "c3740581-4723-4f39-a52a-48c6843487f9",
                'organization_code' => "4H--uv5O--Ru-1XUx",
                'private_money_id' => "0e123808-b08c-4ace-b0f0-b6e24db6e851",
                'is_modified' => TRUE,
                'types' => ["payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
