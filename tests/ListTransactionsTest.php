<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['types' => ["payment", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['is_modified' => FALSE, 'types' => ["exchange_outflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['private_money_id' => "e7b84a1b-30c8-4fdf-84a6-0d57c385d5a1", 'is_modified' => FALSE, 'types' => ["payment", "topup", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['organization_code' => "zQ-1E1i-1X-", 'private_money_id' => "888ee7b0-33c3-48b4-9027-192aa96fac1d", 'is_modified' => FALSE, 'types' => ["exchange_outflow", "payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['transaction_id' => "1a6cb6a7-cf87-40e2-8bd2-da88bbeb89b7", 'organization_code' => "1HsY-7bEi--MY-kD", 'private_money_id' => "c8667b4d-c37c-408a-a0cd-d12d23bb606b", 'is_modified' => TRUE, 'types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['terminal_id' => "a6a6bede-0e10-4a9d-9288-1dd71efaedcf", 'transaction_id' => "d3415b37-aaf7-4b10-aee6-b582aa7ebd10", 'organization_code' => "--J16", 'private_money_id' => "10d6075f-ca5d-4846-a772-a8cb0c9a75fb", 'is_modified' => TRUE, 'types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['customer_name' => "gtw6UVhj0EN00My42TJFUenl1YGQsnXn4jI7fgCm9uNgodNRrtx1x1kruGyTjfJDOXAV5lSU0wO044lbPlu7gxc3pyoA2Vl2FH5H1hObYhdE7yPPITnbplvlSek5rZByH2G5cDImBGvzlP", 'terminal_id' => "fec19033-4109-4e5e-af48-d4bd943c29c7", 'transaction_id' => "7360570c-46a1-4d01-8d66-8f05abc2cecd", 'organization_code' => "--7N", 'private_money_id' => "c7e6eb24-12c5-435c-9a89-638fcbddb19f", 'is_modified' => FALSE, 'types' => ["payment", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['customer_id' => "52028d58-beb7-4aed-9a35-ca4907ed4a02", 'customer_name' => "ycf1XME0Uc5HdidOzbhq4BvpHFPKl5prB2zuWeXuPCFGkyhzyWny08dG7yRL682wX5XgNb88XMTzcVjSYRwNtsu2twfDXjxR8r5Qc2USYQtVQTzn0oKxZBdMqL9rizv42dGcUlyKkWT6sqHCrOvZq1zFKBH4qhdwsJT5Kg11UMb4BXaIfgM7qYo1nGRapt0vV", 'terminal_id' => "adb05d36-1108-4e8b-8947-ed8deb9b274c", 'transaction_id' => "d786d48f-e879-49b1-82ba-b823c6df80ff", 'organization_code' => "-0-", 'private_money_id' => "dbfc46b8-7dec-43ec-bdcb-c4d3636d6030", 'is_modified' => TRUE, 'types' => ["exchange_outflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['shop_id' => "aa3b0a73-07e9-446a-aeaf-1d192bb67de1", 'customer_id' => "acd61ed6-b335-4744-8481-2b19bc3a84da", 'customer_name' => "IAP4ECsu7MzwSc3q4lWN1vOapDET7v69R1KwVi7rrloZWdKIfQdGJ7ihIKmA1xThftTerFrY8XJez1sO", 'terminal_id' => "a2e2a455-c837-4fa9-9e97-17f47734e69e", 'transaction_id' => "9025c9e7-3171-498d-939c-48640021ff4f", 'organization_code' => "--26O509qel", 'private_money_id' => "e048cc54-37b4-4ee3-a1b1-cf4e39f7c093", 'is_modified' => TRUE, 'types' => ["payment", "exchange_outflow", "exchange_inflow", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['per_page' => 3959, 'shop_id' => "1891c4f8-1413-4774-8e3c-550acce690d5", 'customer_id' => "28819c6b-fdce-48f6-9da9-0bba4346050f", 'customer_name' => "ZeqOKU8LWK7TWoUzrFGJ6QbLL2pcrSS1HFr84XPtF8FrJu46RJaCQ4b4z10eClrhxtNRmhHnRH9pXH47u7OHFes2iV12unwmygbt40eD7qHUq1KQzznx0yJrrG69BuuC0ojjWqTG7QRTLfwzwmRfPctWLmkHHgwaXK3", 'terminal_id' => "fd03b102-7a84-4f30-b4a1-3636680f53b0", 'transaction_id' => "73c78cbf-b194-4240-8809-993794a321d8", 'organization_code' => "lPY-d4qF5-dSU", 'private_money_id' => "c635e044-f6fa-486b-8fbe-37802f5ca873", 'is_modified' => TRUE, 'types' => ["payment", "topup", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['page' => 8573, 'per_page' => 4018, 'shop_id' => "57f089a8-5132-4ec1-92ac-d65ef41bdbcc", 'customer_id' => "e77d5517-9a07-4557-8d16-e162b1fcfc99", 'customer_name' => "rnucVh4uUt4NnFMxNDHMkSdXm1MxzOi7uj4MMmk6MDxJYL7DP2Vfhb1ZmCoQu6AMJ8hjbFm0VtfvC4dRXExD5ZpneNxU", 'terminal_id' => "07248839-523e-4b79-829f-9f1d05fa8a18", 'transaction_id' => "cf297093-7228-4df4-8ee1-62b455742c1e", 'organization_code' => "67R-2-4hb-uJW1", 'private_money_id' => "f53c76fa-2dfa-4086-b730-95864c94bee1", 'is_modified' => FALSE, 'types' => ["exchange_outflow", "payment", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['to' => "2022-08-03T08:49:26.000000+09:00", 'page' => 1686, 'per_page' => 6650, 'shop_id' => "3a07bb2e-7e7a-4bfc-b8b8-752ae2730989", 'customer_id' => "5b2b5a8b-768a-4a7b-973a-b2f0fe6281d9", 'customer_name' => "5yL3VPdIV4AS9wUpZg4V5aJDnNYUVxVGn77oPUhyLw1ogxNRwg14itvWa2TOcQW6Hw2uqvYPEQ5quT0jnUekRX9wLRQEAMXa", 'terminal_id' => "4f77c781-fad6-457f-bdb5-6053be8eeec3", 'transaction_id' => "2ec83c26-9e92-4678-977d-88fc890427a3", 'organization_code' => "tqikaR-", 'private_money_id' => "dd4b1855-590b-471b-8b5e-74edc80347d5", 'is_modified' => FALSE, 'types' => ["payment", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['from' => "2020-08-30T20:28:42.000000+09:00", 'to' => "2022-08-15T14:02:05.000000+09:00", 'page' => 601, 'per_page' => 9201, 'shop_id' => "d3684fc8-f40f-41d4-bdeb-90400a1e96b8", 'customer_id' => "b61e04ff-2dca-4c85-9730-e64bbbdbbc0c", 'customer_name' => "vyBZlSSBryuJNdhhIMPgbZFt2HAK2Sg6dghZ8j3qXxWPWRZmcptQg0KVvAIKiMWsawBCt8aXAwZG9g2EUdH2K3rR1l40u8pSFCKhrLvXTqSEcZAw7P3nUVxWGZOvEMDQYqzFFYBHPb22Tc9ObECTn56Wuy7DDVSXa7PugzCLresccgmLJ7S1ntixup0iR6KoL8FSJeh8ly73yz8JcoxQBoUw9FwC2Gxjq55upkJs1RN6plcfm69JWZ", 'terminal_id' => "e2401bfa-1471-4d34-bdaf-3615586c64d6", 'transaction_id' => "a915ba34-014d-4cd1-b905-9b97becd8849", 'organization_code' => "", 'private_money_id' => "4784e1e8-3212-440a-b472-c64392df8ec1", 'is_modified' => FALSE, 'types' => ["topup", "exchange_outflow", "payment", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
