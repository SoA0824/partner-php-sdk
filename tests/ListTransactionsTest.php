<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['is_modified' => TRUE, 'types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['private_money_id' => "de443390-111e-4fd9-b279-91ab7f4c8505", 'is_modified' => FALSE, 'types' => ["exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['organization_code' => "", 'private_money_id' => "f969d203-b4ab-4b62-8c67-539d4287386c", 'is_modified' => TRUE, 'types' => ["exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['transaction_id' => "a0f1d1aa-cdf9-4fd2-834e-81c59e8ecd3e", 'organization_code' => "S-", 'private_money_id' => "c368fac8-d485-45c8-af2b-72ada1de5989", 'is_modified' => TRUE, 'types' => ["exchange_outflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['terminal_id' => "98c2c8f0-691f-4f27-9d0c-7619b29f511c", 'transaction_id' => "9c85930d-f24c-4b63-b0e1-3c701411cccc", 'organization_code' => "qCD32--", 'private_money_id' => "558aef6d-35f0-4e7c-8d7c-4bfa5e625656", 'is_modified' => FALSE, 'types' => ["exchange_inflow", "payment", "exchange_outflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['customer_name' => "Cg86jcM7Q2tDXoQ9QGW2ajL9jeYciYtF6GjPPkCD2zyJiIPFXDfmPe1jQauU6Fxm3VtgUP7UK1bXwmcA7", 'terminal_id' => "f80eae9a-a091-4699-8c22-ca70c06457d4", 'transaction_id' => "13fe5a55-926f-4c95-a0a1-06d9f4b216f9", 'organization_code' => "T9", 'private_money_id' => "1f819296-27d0-41d2-a1c2-335429a4d32f", 'is_modified' => TRUE, 'types' => []]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['customer_id' => "4cf9feff-55e9-4787-b1ad-79c93a308e37", 'customer_name' => "e7Wr5QfMMnEXtbn9j47DTu1RSPZOScCdonCasmksJ3KZ0Xq5ogeslTiWXqkEycVEO5vl05lEQID6UkZCMYitvMs7HKwHjIl8tBeMoo78wrzXzygv3bxAcgVlN8GM3XxRLJWlYPBS6kGVSVlv8GfpsRSyvsx6ytRtlgTxx9zSaDIaFLqDV9NVbDnF03oGZOMlh", 'terminal_id' => "e377cb16-146b-4f94-8ad3-7b5fae10dccf", 'transaction_id' => "d2e41200-9782-4418-836a-cf0915ae214f", 'organization_code' => "e7-K--ma-1R3zeQ86---", 'private_money_id' => "601bba42-777e-4e82-9aaa-71a03ec7a06c", 'is_modified' => TRUE, 'types' => ["exchange_outflow", "topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['shop_id' => "7a4cfc84-6bda-475f-8d40-fd5ff0512872", 'customer_id' => "e49664e5-f395-4580-ac81-d0b7b8d4e46d", 'customer_name' => "e4rE", 'terminal_id' => "86b28a47-5a0f-4201-a583-325f79a1f858", 'transaction_id' => "d13f045b-ffca-4806-a1a0-bc884953a574", 'organization_code' => "aDW-5kbv-h-BGd-pkgm9DQkbId", 'private_money_id' => "47593034-ce34-4f23-b2a7-0e643a11323d", 'is_modified' => FALSE, 'types' => ["exchange_outflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['per_page' => 9163, 'shop_id' => "8b6ab59b-b5ab-4e34-9567-4826dc37cf35", 'customer_id' => "01a5ca09-5338-45b7-b74a-44ef7425221a", 'customer_name' => "70QMy5qFYLPlXXLs9GAH6GUXTtNUnL4Rq", 'terminal_id' => "1207b882-25d0-4a46-adc4-7a7afce35a1a", 'transaction_id' => "0250ee20-adeb-425b-b9ee-2536f36c7f59", 'organization_code' => "-3h-3wV-b4q9L5", 'private_money_id' => "0116ea8a-d026-4b60-b736-f6847cdd044e", 'is_modified' => FALSE, 'types' => ["exchange_inflow", "payment", "topup", "exchange_outflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['page' => 2747, 'per_page' => 2754, 'shop_id' => "ece778fa-83c6-40a8-a15e-a4616a46a499", 'customer_id' => "82df463d-a95b-40f7-a3a9-c57c7e610277", 'customer_name' => "jRgbnav5XO9JyvG1ydaXnLen9drV1bF91HgnmoTxAyyUhkf7dw6etCEBuv7Vgw3V9RabSmEP68gvHCCRCz7xOECNgma0SVCMuuxPJlb697ucwDdlGCSvSjdT", 'terminal_id' => "20a78c17-f5d2-498d-8cf0-1cb0adb77106", 'transaction_id' => "5f219d4a-86a2-4c47-8fdd-2386e72821a7", 'organization_code' => "t3Wq4--g", 'private_money_id' => "46fb72bd-d124-4c36-a39e-d60cb14bbba9", 'is_modified' => FALSE, 'types' => ["topup"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['to' => "2024-07-24T06:10:01.000000+09:00", 'page' => 7465, 'per_page' => 7728, 'shop_id' => "4f221023-7b0c-4be4-bafc-db192c859166", 'customer_id' => "5df0c81a-6516-4db6-b300-cd48836c9e1e", 'customer_name' => "rAE7fJwEM7JnLrUF30lTQ7C8w", 'terminal_id' => "a02caabe-0bb6-4749-9707-08d61eec6f90", 'transaction_id' => "15880d33-ab0c-45ec-aec0-03ddccc73395", 'organization_code' => "wGROP5-D4EYa51i9JpO-1-69509-8LJv", 'private_money_id' => "93d1b7c4-5fcc-4a7d-ae94-38869f767c7c", 'is_modified' => FALSE, 'types' => ["payment"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(['from' => "2018-08-31T03:15:12.000000+09:00", 'to' => "2022-01-10T08:04:08.000000+09:00", 'page' => 8249, 'per_page' => 9138, 'shop_id' => "9b744363-c7f6-4d1c-a8b1-024571c1f38f", 'customer_id' => "1f4668fc-0587-41dc-babf-9ebfd69e29e4", 'customer_name' => "PGmpq53DSnJE4onrUvepMfv9M22eeOyr4mmhgIH0g4e", 'terminal_id' => "d82b6803-e98d-4b1d-8409-d9e138a7106d", 'transaction_id' => "f14c211a-6f0d-491e-82c4-940ba1183503", 'organization_code' => "", 'private_money_id' => "97e3d9cb-6708-443b-876b-7ed7a3442efd", 'is_modified' => FALSE, 'types' => ["topup", "payment", "exchange_inflow"]]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
