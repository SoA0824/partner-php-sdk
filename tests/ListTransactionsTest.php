<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "e64708bb-85f0-4247-adda-40ab6f19675a",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "payment", "exchange_inflow", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "",
                'private_money_id' => "b15720c8-f73d-4c0d-b768-8862857192ad",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "1aa9e839-a803-40f3-94a0-cd1d79cf2a3e",
                'organization_code' => "0p6S5dE---XMxvFoMK8-V6ok2U8m",
                'private_money_id' => "4c867381-85b4-41d7-8c75-a8486045cb4b",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "a8587009-a9bc-4f59-910d-f3f00651e344",
                'transaction_id' => "ced8249f-6b83-4c0e-8c74-28bb024cd4ca",
                'organization_code' => "2v--5--z-z9Efjzs4F--N--2-6",
                'private_money_id' => "fd9d529b-6c85-4c2d-a6c3-d0e4b6bf211c",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "exchange_inflow", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "B7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLo",
                'terminal_id' => "61ad46e1-0a1e-4a4a-8467-476770586dc9",
                'transaction_id' => "536c8ccd-bffe-472f-ad27-db891328ff19",
                'organization_code' => "5",
                'private_money_id' => "8bc98c5f-01b7-4ace-9eb6-d2c2d8da910a",
                'is_modified' => TRUE,
                'types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "286b2aff-1133-49bc-b8e7-3fd658419da3",
                'customer_name' => "hWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65ls",
                'terminal_id' => "df683fba-0da8-485b-90ee-f7963b5cebf0",
                'transaction_id' => "f975ed1b-5f84-4cac-aa55-502a23e5c540",
                'organization_code' => "tSY--8p-n4-V345",
                'private_money_id' => "4d9feda8-8503-4d83-96f8-6f50c4e1dd94",
                'is_modified' => FALSE,
                'types' => ["payment", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "6a94b994-fd78-4f83-b97c-6614069e5282",
                'customer_id' => "12589f85-54b2-404d-ad6c-a6175e39f6e9",
                'customer_name' => "F75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvW",
                'terminal_id' => "515bfa3b-913f-4055-a082-36085fb67d6e",
                'transaction_id' => "526a1001-7d6b-4531-be37-41cbe54ec457",
                'organization_code' => "sOsBf3nQ",
                'private_money_id' => "2513727f-228f-4ae1-b2a3-6f3d5710deb2",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 5308,
                'shop_id' => "8582b704-7449-4e4f-99ec-337df2987d51",
                'customer_id' => "deb706e0-5aaf-4db3-98da-7543ffb37461",
                'customer_name' => "lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmG",
                'terminal_id' => "348fa3e9-74e8-4f46-897a-86b2d3dbeabb",
                'transaction_id' => "b37b9ddc-601f-4ffa-b089-b16782921b9a",
                'organization_code' => "c",
                'private_money_id' => "3a0776c0-7bfb-4a70-bad3-1800628e550a",
                'is_modified' => FALSE,
                'types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 6517,
                'per_page' => 6789,
                'shop_id' => "f3b42d26-73c0-48ff-92cb-4df8d89e7ffc",
                'customer_id' => "163ec786-059c-4b35-96b0-e93ccf7ead49",
                'customer_name' => "U1H2",
                'terminal_id' => "74ab4c71-5d75-4360-91ae-e6ffa9b8a5f9",
                'transaction_id' => "d7d2dbc8-2b82-4677-ab8b-0bcd5f5de3ae",
                'organization_code' => "9KDr--",
                'private_money_id' => "ca8a5f86-f8b9-499f-843a-41d693a2efb4",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2023-04-28T06:41:44.000000+09:00",
                'page' => 1562,
                'per_page' => 9389,
                'shop_id' => "3a4a995c-69f1-4b4b-87f5-79932f3ffb4d",
                'customer_id' => "7e69d051-4ac5-4309-a2c9-dc6890805453",
                'customer_name' => "LSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTt",
                'terminal_id' => "611d2a41-4de4-4787-a0f3-0565b81fee43",
                'transaction_id' => "b2c04635-0e31-47d4-a11d-01546992b7fa",
                'organization_code' => "-iLW-Q-",
                'private_money_id' => "2214ddc3-4de3-41c8-accd-75e1f5fddc40",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2018-09-18T18:45:23.000000+09:00",
                'to' => "2024-04-18T10:27:26.000000+09:00",
                'page' => 793,
                'per_page' => 479,
                'shop_id' => "955f678b-1569-4389-a05a-306ae569492e",
                'customer_id' => "81004be4-255f-45cf-afa0-c07ec4d71da4",
                'customer_name' => "xmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24",
                'terminal_id' => "05130c8f-d77b-4de7-b271-f16c43c62e3f",
                'transaction_id' => "b89078eb-fda9-41e0-91fb-95e5bc601ef5",
                'organization_code' => "7G-4-2-LzD-",
                'private_money_id' => "fd164407-f392-4f7b-92cd-723f3f88b8d0",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "exchange_outflow", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
