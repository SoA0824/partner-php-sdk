<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction("ff2b67de-dfa4-4ba6-bf75-a7ad4a70ab74", "08ddad30-c8c5-4d99-b0e7-bdbf96837e3d", "435db9df-baaf-460a-9f1f-10cdb7440a15");
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction("ff2b67de-dfa4-4ba6-bf75-a7ad4a70ab74", "08ddad30-c8c5-4d99-b0e7-bdbf96837e3d", "435db9df-baaf-460a-9f1f-10cdb7440a15", ['description' => "NF8TbHH9FjMDwvXkVnBWoRM6tEV7oX4ZwR7Qfj5OOatrZM36uTqcJC6ds2upLnt4U5VRCoFUM59lyMsxI2sikDmSzBDWL9aarkUnkbOQxo3a4RmQEkhdGUy1amMYp3NCx6Pne417M6op1RnaDQLhwfmxBWtZjrN"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction("ff2b67de-dfa4-4ba6-bf75-a7ad4a70ab74", "08ddad30-c8c5-4d99-b0e7-bdbf96837e3d", "435db9df-baaf-460a-9f1f-10cdb7440a15", ['point_amount' => 7496, 'description' => "tL59F6fJz63OxuiMCnMlmUNpXzwdxflQOMRwI2RNTFC"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction("ff2b67de-dfa4-4ba6-bf75-a7ad4a70ab74", "08ddad30-c8c5-4d99-b0e7-bdbf96837e3d", "435db9df-baaf-460a-9f1f-10cdb7440a15", ['money_amount' => 1702, 'point_amount' => 4190, 'description' => "FW52"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
