<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "2d137e2c-2d3c-4463-804f-db4fe7280e31",
            "9771b1f7-5d32-4cc7-97d3-12e8c7e7a98b",
            "d732f05b-d31e-4ecd-ae86-61d1f844d678"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "2d137e2c-2d3c-4463-804f-db4fe7280e31",
            "9771b1f7-5d32-4cc7-97d3-12e8c7e7a98b",
            "d732f05b-d31e-4ecd-ae86-61d1f844d678",
            [
                'description' => "P1XNaA4tMwkt9CEIs7P52Qn8Ps6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "2d137e2c-2d3c-4463-804f-db4fe7280e31",
            "9771b1f7-5d32-4cc7-97d3-12e8c7e7a98b",
            "d732f05b-d31e-4ecd-ae86-61d1f844d678",
            [
                'point_amount' => 2418,
                'description' => "Gg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4U"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "2d137e2c-2d3c-4463-804f-db4fe7280e31",
            "9771b1f7-5d32-4cc7-97d3-12e8c7e7a98b",
            "d732f05b-d31e-4ecd-ae86-61d1f844d678",
            [
                'money_amount' => 6690,
                'point_amount' => 774,
                'description' => "a8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4Vsa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
