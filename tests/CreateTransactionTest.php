<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "de67f3f1-8740-41db-a555-1b154b2499ed",
            "e7d8da6e-7dbb-4d63-b991-7c59d8d7ae33",
            "8f8e055c-c9e9-4dc2-b2e3-5c587b946ec2"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "de67f3f1-8740-41db-a555-1b154b2499ed",
            "e7d8da6e-7dbb-4d63-b991-7c59d8d7ae33",
            "8f8e055c-c9e9-4dc2-b2e3-5c587b946ec2",
            [
                'description' => "51I3ZHcHbU0V4WVEwJrXJP6RJ652F8T1eo89ZVKggs7X3jvJgim0bGmBIAYnzBiA9QmZrDACVnyS1YEz1r6fgOwrqnIQJWx2cFH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "de67f3f1-8740-41db-a555-1b154b2499ed",
            "e7d8da6e-7dbb-4d63-b991-7c59d8d7ae33",
            "8f8e055c-c9e9-4dc2-b2e3-5c587b946ec2",
            [
                'point_amount' => 8227,
                'description' => "PNiazGlfHPj2V7fzLT9Bnchup8s0LX04aNuzNkPOUwB3X0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "de67f3f1-8740-41db-a555-1b154b2499ed",
            "e7d8da6e-7dbb-4d63-b991-7c59d8d7ae33",
            "8f8e055c-c9e9-4dc2-b2e3-5c587b946ec2",
            [
                'money_amount' => 6285,
                'point_amount' => 7320,
                'description' => "KIG3b0AyZq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
