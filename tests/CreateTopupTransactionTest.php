<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTopupTransaction extends TestCase
{
    public function testCreateTopupTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "2df34f1a-33a3-47e5-9cc4-a521cfbd0dea",
            "f48e6a5d-0a4b-4eb5-a6d2-42edb03801dd",
            "236262df-8237-44e1-ae14-cf1c63bf7a86"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "2df34f1a-33a3-47e5-9cc4-a521cfbd0dea",
            "f48e6a5d-0a4b-4eb5-a6d2-42edb03801dd",
            "236262df-8237-44e1-ae14-cf1c63bf7a86",
            [
                'description' => "PKVzLHamYdPvuGmcF568p5lRDfRuSQrtikn0SashETQGEnGpxpcwzcVzotTqJ96I1eDAKwZoSNMJvwIXn3UCWVXYmzirMVGcbk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "2df34f1a-33a3-47e5-9cc4-a521cfbd0dea",
            "f48e6a5d-0a4b-4eb5-a6d2-42edb03801dd",
            "236262df-8237-44e1-ae14-cf1c63bf7a86",
            [
                'point_amount' => 5650,
                'description' => "jtO1qXh1xkap4bBY5dTBG1YKGilfF9oAdY8fSUPOJJU2IqvIqEt4ns4k38vhmBtfXw3cuHKMMXmB4K0KdakyBsKfRjIpv90Q8goZsDR1Wvf9wkc0jQXbhNZ2AH791PqzNQpqthfWBM3g6xpt3fVousZf7SCV53NRgyruTSow2jke7JJIjYbeHLnjWbGoZjAwxSZssH9Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "2df34f1a-33a3-47e5-9cc4-a521cfbd0dea",
            "f48e6a5d-0a4b-4eb5-a6d2-42edb03801dd",
            "236262df-8237-44e1-ae14-cf1c63bf7a86",
            [
                'money_amount' => 4825,
                'point_amount' => 9255,
                'description' => "hVNJLNyZmZIF9xv8AuG395K8I7waL5E1HYmFw1Eiqo2c2hPrNMM7k38LkVxfycZZQmjPyYriveLJmWkfGyhmDFY37w8LgGbGqNXhjjkQgY9eCvn3P81fixep7hGSgnpH4nM48mbKq8fO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "2df34f1a-33a3-47e5-9cc4-a521cfbd0dea",
            "f48e6a5d-0a4b-4eb5-a6d2-42edb03801dd",
            "236262df-8237-44e1-ae14-cf1c63bf7a86",
            [
                'bear_point_shop_id' => "7f284e04-d6d8-4a54-973c-33df1fec7d7d",
                'money_amount' => 9005,
                'point_amount' => 9007,
                'description' => "MvtTaScM9KFvO0iTtFq4bZdQYryMMi2357m1cSui6TSahud96mULFhw7uPXu1izf6rwQ3ERUxioNTZzV4mQbMr5uieuamqD9LiME3KR5yWKAvVIulk98CzCw3lxnPwkcwCmI9LUK4uqfXcLfIdaW5JaY24bqUJa9fWBk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
