<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 8860]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 3539, 'description' => "jf9AP0yj6K6SCDJSsXeW54lX5RV"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 5395, 'is_onetime' => TRUE, 'description' => "fILdh7UaP1qpWSoVOM7244G8RzyqHqbOd1rL9m67AC0NrH1rGviBhYFqsnBGJ0baL1aNncj12RlZq0YYCJmB6l1vMWAK7jkeUVgQjch3Ki8JvmkgiT2OvWJYt4k7yb0SMvzOkty679oplJ1zxw1Kk"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 1302, 'usage_limit' => 1674, 'is_onetime' => TRUE, 'description' => "Vqre0KaIEb1YvkNWIOdylnFT8VyO5zdRluaiZSe0lSTwtQIeF7ZSmdQaMZAxR2pdosgn5kkUIeqZ4G268Ctdgmh9EIwiJQ4uro7GLXynmMO5L1K6Y8KMjHTQQ415o2plZHisKgPz5IA7QlpNiIq4Xx7sDrzHxLOU2a979T6aPZQ006Htrll5R1MGaUMK"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 6723, 'expires_at' => "2025-01-16T23:02:02.000000+09:00", 'usage_limit' => 8073, 'is_onetime' => TRUE, 'description' => "5O50jKBbiP4rM27lDOcLHnXS5JuVkA5DCigtrcQcVMFW745o3po9QtX790GyNHdHd4jtEVMzDzoDZ"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 2547, 'point_expires_at' => "2019-06-15T05:02:02.000000+09:00", 'expires_at' => "2022-06-05T23:07:41.000000+09:00", 'usage_limit' => 2285, 'is_onetime' => TRUE, 'description' => "SgfkO638Lq6DB18UC1rxLazox3JydaQp5wuEdbtv9qE5cWAJnlL4QpNaSPjx38yl3FAuQSZL0XQ2jB6Jk9ZDte5iqXPgJA5Wczo6eoFamSO44K19gftSTel1f5NKxpnbLuL9UVNbZV8V99OjPrO9ToDKq6KszhzufxaA6Jrf7rTy0ziYSegzEanHOixWibvng9DnpZI4"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 4402, 'point_expires_in_days' => 3903, 'point_expires_at' => "2022-10-06T13:36:46.000000+09:00", 'expires_at' => "2018-03-07T05:30:54.000000+09:00", 'usage_limit' => 7905, 'is_onetime' => TRUE, 'description' => "mcFLvbA2KeQIDxqoN8Ml3IPobhY78Tc8V"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 9762, 'bear_point_account' => "df38a2ce-30f6-4311-8ad0-07d640c099eb", 'point_expires_in_days' => 3550, 'point_expires_at' => "2023-01-19T23:44:42.000000+09:00", 'expires_at' => "2020-04-09T22:48:23.000000+09:00", 'usage_limit' => 2483, 'is_onetime' => TRUE, 'description' => "6bKZLJ3trOnzlMDWFWoOEi9WryLSgFDvE69nUJ8yr6cAV4S0Ycs9eYadCNXNXVZ5hVtPSX99KCdf6fdyT6sQeDHViX2WfZ8CgwEh2PK5pUspPBe9yLxm7tMDr0N2ovqLqC3DhxVDO37r3UCyfSkPcXyIji7120cZwb4WBzsygnbjsME6"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 1359, 'point_amount' => 5659]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 8521, 'point_amount' => 2792, 'description' => "TONJeVie0u3ks49yyHDq9dcjWcMmP9zq70p3f"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 1098, 'point_amount' => 366, 'is_onetime' => FALSE, 'description' => "ISNWIoE0vBh7G1brbpC9QhGqH5TJY446ouhbsh3euQnC3GmYQ6PIU6ECZBVX0JUPYcApQ9ai6qmTc1fdzGl92MKvehbOfQ0YRxeStgq4RUZbIbYD000YSAJfwxtP5SR3ZKzNxhnH3OwlPxxy852m74Yh6cirFyIk4qznji"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 5533, 'point_amount' => 5066, 'usage_limit' => 322, 'is_onetime' => FALSE, 'description' => "ZquggfKRBhwfj7EjCGkGuVvrFq9Q94mBmquwrbUZlZRRVIu0cPrhKvJx2NVH5Tzu4ca8tTKafI9bWOqsp28VRCgYktjRHHkMECFWppAB7qF27kxk8uP2iyqBc2qcLF2lGPNLTvfx3LIu81JOFao7W496xwmLA7yIJ8vYYaBMVBL3O7FsRxBHQbDaVJZ5ch1BUait"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 9234, 'point_amount' => 3315, 'expires_at' => "2017-08-17T19:58:24.000000+09:00", 'usage_limit' => 1188, 'is_onetime' => FALSE, 'description' => "no4km4gnTRdS3TZN9"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 4264, 'point_amount' => 1907, 'point_expires_at' => "2017-03-15T13:36:11.000000+09:00", 'expires_at' => "2023-01-11T23:50:07.000000+09:00", 'usage_limit' => 6161, 'is_onetime' => TRUE, 'description' => "Ctn43y7OYLhreD85phqApc8JShwDUP0UwazWodVtCrxPYbDRuWj1fAfrisy78Edhbr4R3eAB6jNLHddvEtc3uNFoxWZQcU0OdArCy6pzXoI9j4jAF5KA6HPutNJI4KeHxupDktuIdpaAQUNKj"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 8917, 'point_amount' => 1551, 'point_expires_in_days' => 7550, 'point_expires_at' => "2024-04-29T20:33:12.000000+09:00", 'expires_at' => "2018-05-09T12:58:15.000000+09:00", 'usage_limit' => 599, 'is_onetime' => TRUE, 'description' => "Qa58kHbV5RHwxNP1xLpjSTDuYIfH0DPO5DYUrFrCroz4flZClN65mNN2Dv18HEwtw"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['money_amount' => 7567, 'point_amount' => 8287, 'bear_point_account' => "2052ad07-704f-46dc-87cb-300032dcc0bf", 'point_expires_in_days' => 1817, 'point_expires_at' => "2018-07-31T05:26:03.000000+09:00", 'expires_at' => "2024-06-29T00:19:34.000000+09:00", 'usage_limit' => 5331, 'is_onetime' => FALSE, 'description' => "H5xEuZMh7endWnjrPqgfkaJaIlpXO0yXa75zwFCEfX3aow3UnhUFh0bC0IWUVbNjydqrYgX7VLOPd8fTqY5xpj1DGd5GswMsGSTWC5sCTuEgtcv6hevZJ7sIo0Ubw"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 2636]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 7374, 'description' => "tV0KRpKNiLhCd0X7pfWjYXrqJCFFtJIEgCqihuQR0kVI9LPTdmujGRuKg6z5A6N7S9Psna06c9KBOFPNynF2LEolBkLTfuuxAaQyjNtxLQv7RrhWJKMLLmJ3DuhbFuQY4SMpUqEXniwMxdH5uvY2U8Pb5vZRbFuy"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 7886, 'is_onetime' => TRUE, 'description' => "XHPAIA2H16dGE0UDMEtA87sigVDnwB4592rPs6e1TeunAxYeg35t300eDTH7zs32PeqafaIj9wqgo9suxVm5Im24qnnoCjZ5vnqTd6lXRl"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 7125, 'usage_limit' => 2169, 'is_onetime' => TRUE, 'description' => "Lvbb8vWgPWYILu0oK08GWBvMtGwf7nsDsAmkmlo1fPnktP4DGeWW8khLwqua2PgCpvy0PzhnxG1nAvoQijgCmhxb461Pdo6GPHNO2HfsbHuf1p6wsYvR8jmuVnBAuhdHd"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 8935, 'expires_at' => "2016-10-21T00:13:11.000000+09:00", 'usage_limit' => 1610, 'is_onetime' => FALSE, 'description' => "Tv6xFvcXxRjQvGYEDNq0p2LRtlFl2oSzT0t4G92BRuZGE68xJNpcHN2iJgZdkCYy7B3x7LyJW4lnqSq4PNcyKD6Im6768hxIgr21l1VQtFHsA3dS0e68Zl8mVVXhY8skr1qn"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 659, 'point_expires_at' => "2017-01-20T17:42:51.000000+09:00", 'expires_at' => "2016-02-21T19:48:05.000000+09:00", 'usage_limit' => 5221, 'is_onetime' => TRUE, 'description' => "HmA5z9VmFaYppG6fOcP7x31n0xxYHpM9GUW"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 6264, 'point_expires_in_days' => 918, 'point_expires_at' => "2022-06-11T21:11:58.000000+09:00", 'expires_at' => "2019-11-15T15:24:11.000000+09:00", 'usage_limit' => 3527, 'is_onetime' => TRUE, 'description' => "xmgWaPVl6kpaumPx0QXITEsiWW24k6vN6lZgc5chsnKFYWTCa"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("8f6e5ee7-bc56-4835-ad9e-892ebf8ed3c2", ['point_amount' => 3119, 'bear_point_account' => "5ea4d018-8660-4587-92a2-816d75391379", 'point_expires_in_days' => 528, 'point_expires_at' => "2021-02-15T02:00:02.000000+09:00", 'expires_at' => "2022-10-03T10:12:49.000000+09:00", 'usage_limit' => 4190, 'is_onetime' => TRUE, 'description' => "qoQfP5T6Y3poJMtLFNaOT6inelrVBHW2lT0tjP9verkSylh6n21DctDBF4UIFfTXFO8WHWU5FgLZPI1ffrU0hMZHBHnYrp5IFP3be96QU2DUyQbyqbHp4drPTgA4hgSKNVwCciKftRUIMpJO5S2oUObSLk9LlfQvGf2dQ9H6q8"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
