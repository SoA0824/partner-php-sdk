<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a");
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['bear_point_account' => "4c3ab539-43e5-4517-83bf-c8df5e23632d"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['point_expires_in_days' => 9465, 'bear_point_account' => "8cc6a5b7-1bbd-4f74-8351-1a410c78f9ef"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['point_expires_at' => "2016-12-12T23:26:39.000000+09:00", 'point_expires_in_days' => 7334, 'bear_point_account' => "6c91b16f-292e-4ba7-8ee5-189030c81fc2"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['expires_at' => "2016-03-08T02:18:33.000000+09:00", 'point_expires_at' => "2021-01-21T20:52:26.000000+09:00", 'point_expires_in_days' => 2052, 'bear_point_account' => "0587e41a-a2b7-4ee0-91da-75dd080cc5c8"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['usage_limit' => 7911, 'expires_at' => "2018-02-07T00:08:03.000000+09:00", 'point_expires_at' => "2018-01-25T14:45:54.000000+09:00", 'point_expires_in_days' => 6788, 'bear_point_account' => "b1cde4cc-10c2-492c-9b4b-8449cd2c9489"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['is_onetime' => FALSE, 'usage_limit' => 413, 'expires_at' => "2016-10-19T00:08:19.000000+09:00", 'point_expires_at' => "2025-01-11T11:33:09.000000+09:00", 'point_expires_in_days' => 487, 'bear_point_account' => "6a3e31f1-0113-4883-b050-4afa3ed41a52"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['description' => "maw4gVr8yxi6OUJGovmbiaEJValFWpm35mTiVmVnKiyieYJmAsomXWoUvcMRAwumUPxcD1LGL6EsCw5pjLFMGuoZ5PGrJlUqqXR9iWH1tbwHjWgoXXAGEyL", 'is_onetime' => FALSE, 'usage_limit' => 8050, 'expires_at' => "2017-05-15T11:15:19.000000+09:00", 'point_expires_at' => "2017-10-26T05:04:26.000000+09:00", 'point_expires_in_days' => 3372, 'bear_point_account' => "435d6744-1ea9-48bf-97c4-c2e2e0a066d7"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['point_amount' => 1153, 'description' => "Sbw8Dv2hFGftH4x38EmvCaVS3sf2fByFeamL143JVLXjnO7xD0lSKhr66wYohKPXq6QGo0k5CiJrkskFdfyl0oXTpk3HdFCUgJpLWV9WFqJ9q9QtjzeK3mVML4IzAvlcvRKJQK1BEqoWxeamgNJgT1MIsGb70TnlIb2F9ExxWil", 'is_onetime' => FALSE, 'usage_limit' => 6580, 'expires_at' => "2022-08-19T19:15:49.000000+09:00", 'point_expires_at' => "2016-01-30T08:21:29.000000+09:00", 'point_expires_in_days' => 4660, 'bear_point_account' => "dd4ea522-0f5d-491b-9f94-b8a6146de73a"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("78ee7297-d652-4cc4-8510-3288c42b863a", ['money_amount' => 9250, 'point_amount' => 4954, 'description' => "OmQsCkFeUa6IGdYDPoboVJLAf2q60MTXePITgHS3bzNeNzuBh8unGZskiPISRZ6YSBysyCZgWozydsvM4et3Rou8iZIk0BccFW2HNNV4uMsS6aXOeeb", 'is_onetime' => TRUE, 'usage_limit' => 9197, 'expires_at' => "2021-09-11T04:18:38.000000+09:00", 'point_expires_at' => "2017-02-10T20:28:18.000000+09:00", 'point_expires_in_days' => 5593, 'bear_point_account' => "05f432b9-4504-45d1-befb-ddeb0f9bd74e"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
