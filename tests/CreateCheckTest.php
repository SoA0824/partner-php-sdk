<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf");
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['bear_point_account' => "6b64371d-5a9b-4326-aaa4-342f9bcdcdb9"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['point_expires_in_days' => 4399, 'bear_point_account' => "3e3e02ca-f6a3-46c6-a9f9-d43d288248c9"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['point_expires_at' => "2024-08-17T23:52:58.000000+09:00", 'point_expires_in_days' => 7743, 'bear_point_account' => "1f0589b4-85ec-405d-bc37-e27975c6c07f"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['expires_at' => "2020-04-05T20:46:55.000000+09:00", 'point_expires_at' => "2021-09-13T10:56:58.000000+09:00", 'point_expires_in_days' => 54, 'bear_point_account' => "6d8b23bf-3512-4bea-af7c-5d862a8bd366"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['usage_limit' => 7167, 'expires_at' => "2018-07-22T01:11:01.000000+09:00", 'point_expires_at' => "2023-11-27T09:37:19.000000+09:00", 'point_expires_in_days' => 6530, 'bear_point_account' => "492ddc96-f98a-46bc-92f3-036cc8f51ed5"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['is_onetime' => FALSE, 'usage_limit' => 7068, 'expires_at' => "2022-05-29T13:49:11.000000+09:00", 'point_expires_at' => "2020-04-25T08:51:51.000000+09:00", 'point_expires_in_days' => 9916, 'bear_point_account' => "2349f42c-2e06-4a09-90e7-5d617973f612"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['description' => "rApvwDqo0amr5dkK53MX4E967mmjPKKggjtg9he5ze6WKtySR4kk58S0wVlcTHVMk5BDidqUIIaWJe52rssz89HcC6f4JJ4tJtWVB6jhCO0bvvhOcT0gc4Y9ugTSfOLVU1tFq8nryFLtJOsRKtaeh9SUrPfvVX87gjt51dQ9qV1FTUJ", 'is_onetime' => TRUE, 'usage_limit' => 8036, 'expires_at' => "2018-04-16T01:29:56.000000+09:00", 'point_expires_at' => "2021-10-17T06:00:53.000000+09:00", 'point_expires_in_days' => 7891, 'bear_point_account' => "8312ed00-37e5-4e58-9b8d-5a1f76cef0d9"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['point_amount' => 4104, 'description' => "Oni6CHSvwwYNIGpscq3jyy82r6O2N0HlEsZ64PhMQM6JvjaxMZIfJo4fFsQxqUIbnhDG7myCuDd2wfpfLJg9I69REyKwYXqnbN6AR83kw4gkb6YLKgznTbvYXeT0Fd1VWJRT2sDmOMF", 'is_onetime' => FALSE, 'usage_limit' => 5764, 'expires_at' => "2024-05-21T03:34:45.000000+09:00", 'point_expires_at' => "2020-03-07T07:56:26.000000+09:00", 'point_expires_in_days' => 9582, 'bear_point_account' => "6afd356e-b80f-4133-b6bf-d8ada7b321e3"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck("ca93c93d-9618-4072-85d0-a94489bc5dbf", ['money_amount' => 2758, 'point_amount' => 6895, 'description' => "RTtwx2WAj4QUHkO71rqOR7UnrgGzUmfgkdnd8JkKZMpsrWW6nyJkNzZfc5fbkomT0wmrmDXENiod3rGVJKq8NmL8tDl1vxzoNqDqZJs9WtcYNDDiH16WfW9Yb", 'is_onetime' => FALSE, 'usage_limit' => 7978, 'expires_at' => "2018-03-22T20:37:55.000000+09:00", 'point_expires_at' => "2024-08-16T01:28:44.000000+09:00", 'point_expires_in_days' => 6340, 'bear_point_account' => "3c312821-7e4d-4b83-b39e-47414878324d"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
