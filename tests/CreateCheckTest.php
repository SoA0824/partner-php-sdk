<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 9027
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 4580,
                'description' => "pgyOzxTP9fjXWE1KnzZfHm9WB6lCyoovLcGW16HLw3h14q98rtUEsKjyXUDzni6PsnC6BD4S29o4EWi2OaJY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 7337,
                'is_onetime' => FALSE,
                'description' => "AURaQNtV54KCjWCjuu7FA2I81OD31JbfQMdIzuPfOc5Aro730RMboZRsuhRcPHwMi25nFxqUcNif7EOOnJcPxfpDIAs8hTGtXlC4WooYCeYGqQ297uUhMNHsDXjMtLgiXXZr3Xl6vqzbZXGYjQ4OFvmXFwfJDrP2tWnY1U4TscM1jk0ckKdVew2wFgpoibvs00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 4743,
                'usage_limit' => 3441,
                'is_onetime' => TRUE,
                'description' => "uKoMpi9LeFXrWwbhYSlRAbWB5xkD8zThIls3G5XQntiLRXCy5wTLHQY9xKrQAvneQadsIZcP3DBiqsvZEdxurHl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 8615,
                'expires_at' => "2022-11-25T00:00:40.000000+09:00",
                'usage_limit' => 7711,
                'is_onetime' => TRUE,
                'description' => "zOfzbAcDL5Lo2NfOyS0OkqGnMa3tzJE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 4528,
                'point_expires_at' => "2020-12-26T05:07:46.000000+09:00",
                'expires_at' => "2022-03-20T01:06:54.000000+09:00",
                'usage_limit' => 8652,
                'is_onetime' => FALSE,
                'description' => "JEk2FLQgaVT5IgkZaiykJPLknKfJlp4sz9wwpvWIkUuUj63bRXaDB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 3953,
                'point_expires_in_days' => 2457,
                'point_expires_at' => "2017-12-24T11:35:37.000000+09:00",
                'expires_at' => "2020-05-23T06:21:03.000000+09:00",
                'usage_limit' => 3960,
                'is_onetime' => TRUE,
                'description' => "GuCadx3CKUigtJq0uj5mgjmjNd5sSQNkM8oAcvUjKHdFYStFLjERaghub5u0oVhkAfxaLe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 8399,
                'bear_point_account' => "edf0478e-e63e-423e-b980-3f3f02ce14a4",
                'point_expires_in_days' => 6185,
                'point_expires_at' => "2023-07-20T13:07:23.000000+09:00",
                'expires_at' => "2022-10-10T16:28:03.000000+09:00",
                'usage_limit' => 5034,
                'is_onetime' => FALSE,
                'description' => "WbbyPk3Pnjl1ssFP8lCgadm8xDRfpT4CDz18LPB7m3IPVau5BOCKknWuTyq4STCQXzTH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 1014,
                'point_amount' => 1782
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 661,
                'point_amount' => 4768,
                'description' => "Vt0ERzort6GXEoAOMOkpB2fv04lU7MPEkF4viaKQn2khklQrbUhtOdvmOEVKuoFHPyfmVsvuQS166v5CpZaIME1T9c6rVHyRx5RUMET3UVCTaR1LwWPXfdBXORedtf4qNfP99TugNl0DhsEX9RCWzfhXyMv75t1zG1T67sU1LFYcEwDTSVfBJh3tVNEW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 7181,
                'point_amount' => 761,
                'is_onetime' => TRUE,
                'description' => "7t"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 861,
                'point_amount' => 3746,
                'usage_limit' => 8600,
                'is_onetime' => TRUE,
                'description' => "hbf2PqIUszUgwTTcqezpGCfwAsEqKycPf7YjvdZLwauvAdBTm3hKJPCp3lWyfvtwIhIcHbOvweuLmzmDW6JB2OtoVZHbYf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 4896,
                'point_amount' => 719,
                'expires_at' => "2021-01-04T11:40:00.000000+09:00",
                'usage_limit' => 2359,
                'is_onetime' => FALSE,
                'description' => "ZC4PzhgRhXuEVUVAhkwGDpw664WvWggHeP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 3704,
                'point_amount' => 205,
                'point_expires_at' => "2023-04-17T17:36:56.000000+09:00",
                'expires_at' => "2020-10-28T08:10:42.000000+09:00",
                'usage_limit' => 1580,
                'is_onetime' => TRUE,
                'description' => "6wGOfUEZhlA40SqXW4k5Idynb2D7FTAWXgqKhxiUB6K3oDcO8hpN4XGnscwQaw4zW3UgyfSpVOie3WAMGra3OWFbu6d2nRIa1W4ngs04fNRjhmYK0XDgCgnZziuXxTirI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 4762,
                'point_amount' => 1042,
                'point_expires_in_days' => 8109,
                'point_expires_at' => "2025-05-10T16:07:45.000000+09:00",
                'expires_at' => "2017-12-18T12:50:21.000000+09:00",
                'usage_limit' => 7434,
                'is_onetime' => FALSE,
                'description' => "ulSVHxhPWL2lE9RTu28aiJPAuSIbPrljVo90pzAqvML"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'money_amount' => 3704,
                'point_amount' => 3918,
                'bear_point_account' => "ac3532b2-5a41-4914-9b10-e0ffacdf1048",
                'point_expires_in_days' => 9875,
                'point_expires_at' => "2017-03-18T11:46:01.000000+09:00",
                'expires_at' => "2021-05-02T14:30:00.000000+09:00",
                'usage_limit' => 8893,
                'is_onetime' => TRUE,
                'description' => "PomMw5zn84FYSR2JiRGtHUxqrAlKxWga"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 4141
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 1215,
                'description' => "4FmhMvf5ESirXJYBpWcaf8nRIbIWDUWC16sp8B2CbEgQk7YqGVfhiOYkXPTCceu0w"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 1295,
                'is_onetime' => FALSE,
                'description' => "6AAzl5tWyb7T7mr6BF0nhApY7D8jUMjh7g5tADm9zSZxZpLXFk9sdY8V1DS1AWPQvUcOkaDosqrr6yKDTSlUxm233EvTcOZPUB1sD9Bw1JVJnn9otilEyrfsrGw3FWINzkTony5AOS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 9999,
                'usage_limit' => 8785,
                'is_onetime' => TRUE,
                'description' => "vCnC3WlFmNS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 3546,
                'expires_at' => "2022-08-02T00:59:54.000000+09:00",
                'usage_limit' => 49,
                'is_onetime' => FALSE,
                'description' => "5HbCZiAh31vzdrd5zeQ6VV0rGCL7DIJg2ID5Qt5aMFlEaQ7mLQGPz2oEYCiSS2V"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 7385,
                'point_expires_at' => "2020-12-20T11:08:25.000000+09:00",
                'expires_at' => "2016-01-28T16:16:09.000000+09:00",
                'usage_limit' => 1222,
                'is_onetime' => TRUE,
                'description' => "3fZHaV07gs21TLmjB7LADUDgmM2jIGHf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 411,
                'point_expires_in_days' => 8369,
                'point_expires_at' => "2018-01-10T19:18:40.000000+09:00",
                'expires_at' => "2023-12-24T11:17:20.000000+09:00",
                'usage_limit' => 5800,
                'is_onetime' => TRUE,
                'description' => "oWB4686fONHafdQWfeP4nLzRi5UfRW5NfCEVjHxBMgKgkmKRLy19WPKpxNYJy6Jh10kpiW7aIqEpRaLwybaR5bMc2Svu0pkmDKkL90qy37xsq2y38IeHPtqguYZybpkoGF4i0vHgSq6hAgeKJF59VqV4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17b8a9ac-9291-4ee7-9ac9-cf124f9a1a9c",
            [
                'point_amount' => 1282,
                'bear_point_account' => "73e0d7ef-c768-41bd-be32-5ce2dab9e303",
                'point_expires_in_days' => 6750,
                'point_expires_at' => "2022-01-31T17:25:36.000000+09:00",
                'expires_at' => "2023-09-25T07:31:02.000000+09:00",
                'usage_limit' => 9493,
                'is_onetime' => TRUE,
                'description' => "vSuBZdgXkp1pVzHpsRjlXmxjFJ84Ea6BRw20Pp4ES8r02UtTDbBD6A0ZeVIzYte3mAptpLAgnBPlIQeaZRKkqCwfpH4cxvuBO1fBwzZbBB0ZWbbfmVVhVVP2CLqWjNCw6GPAMTpDgpL7xBhQEEQrMWtes97xeAp0qo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
