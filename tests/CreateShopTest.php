<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateShop extends TestCase
{
    public function testCreateShop0()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb");
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateShop1()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb", ['organization_code' => "g9AE--MdJGbcMNJQ53-jVW-0-HDA1jW"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateShop2()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb", ['shop_external_id' => "bMKGJZ", 'organization_code' => "-5qU2E862O7fT3wwq"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateShop3()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb", ['shop_email' => "57MlVeeFhA@vc1z.com", 'shop_external_id' => "ESSS88Qsa3ciOW67Rf825tr", 'organization_code' => "w4989WOQ0qj-m07bn0s41VzHyw-rwG"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateShop4()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb", ['shop_tel' => "002394785", 'shop_email' => "y8xAbt53Cb@P2Ny.com", 'shop_external_id' => "DxXxqsFFcdhX8xgdyVlNaKODUxL", 'organization_code' => "8Op-4549-M-"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateShop5()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb", ['shop_address' => "4qZ02E7ORrLFXBPtNmkYOFeH", 'shop_tel' => "0472-1671376", 'shop_email' => "6UWna3kf70@9aXC.com", 'shop_external_id' => "ZZ6jW4UynwLohZiSheeRgnKCa", 'organization_code' => "8Yc-bWj"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateShop6()
    {
        $client = $this->newClient();
        $request = new Request\CreateShop("mGzl31gt6Th29MH5TPf0EiySkwsPHc07Inby2XPuiRKndNFHBmb", ['shop_postal_code' => "573-5619", 'shop_address' => "SNHNNp8ZaGlNRGlfIMvFrRSaG7ycLhoke5vKjZGLI6nB4LsW9faeiaoR3KmYL7Yd9eQkr65TY5mOY7oFs", 'shop_tel' => "0227124-155", 'shop_email' => "kdyrPU8Iji@R29x.com", 'shop_external_id' => "wu9TNt7oa2jl5fi1eRxhhm6", 'organization_code' => "QH3bt4cQ8z-u8Wa4--TGZd"]);
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
